# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, . . .
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1, 3
# 6: 1, 2, 3, 6
# 10: 1, 2, 5, 10
# 15: 1, 3, 5, 15
# 21: 1, 3, 7, 21
# 28: 1, 2, 4, 7, 14, 28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

def prime_factorization(n):
    i = 2
    divisors = {}
    while i * i <= n:
        while (n % i) == 0:
            if i in divisors:
                divisors[i] += 1
            else:
                divisors[i] = 1
            n //= i
        i += 1
    if n > 1:
        divisors[n] = 1
    return divisors

def number_of_divisors(n):
    nod = 1
    divisors = prime_factorization(n)
    for count in divisors.values():
        nod *= count + 1
    return nod

def find_the_first_triangle_number(n):
    num = 1
    add = 2
    while True:
        nod = number_of_divisors(num)
        if nod > n:
            return num
        num += add
        add += 1

print(find_the_first_triangle_number(5))
print(find_the_first_triangle_number(500))